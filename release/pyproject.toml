[project]
name = "release"
version = "5.42.0-rc.0"
requires-python = ">=3.13"
classifiers = [
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.13",
]
dependencies = [
    "gitpython==3.1.45",
]
optional-dependencies.tools = [
    "bandit==1.8.6",
    "bump-my-version==1.2.2",
    "fixit==2.1.0",
    "mypy==1.18.1",
    "pip-audit==2.9.0",
    "pyproject-fmt==2.6.0",
    "ruff==0.13.0",
    "vulture==2.14",
]

[tool.ruff]
line-length = 120
src = [
    "src",
]
lint.select = [
    "ALL",
]
lint.ignore = [
    "COM812", # https://docs.astral.sh/ruff/rules/missing-trailing-comma/ - this rule may cause conflicts when used with the ruff formatter
    "D203",   # https://docs.astral.sh/ruff/rules/one-blank-line-before-class/ - prevent warning: `one-blank-line-before-class` (D203) and `no-blank-line-before-class` (D211) are incompatible. Ignoring `one-blank-line-before-class`
    "D213",   # https://docs.astral.sh/ruff/rules/multi-line-summary-second-line/ - prevent warning: `multi-line-summary-first-line` (D212) and `multi-line-summary-second-line` (D213) are incompatible. Ignoring `multi-line-summary-second-line`
    "ISC001", # https://docs.astral.sh/ruff/rules/single-line-implicit-string-concatenation/ - this rule may cause conflicts when used with the ruff formatter
    "TC006",  # https://docs.astral.sh/ruff/rules/runtime-cast-value/ - the rule claims it's often necessary to quote the first argument passed to cast(), but that's not the case in this code base
]
lint.per-file-ignores.".vulture_ignore_list.py" = [
    "ALL",
]

[tool.pyproject-fmt]
indent = 4
keep_full_version = true # Don't remove trailing zero's from version specifiers

[tool.bumpversion]
current_version = "5.42.0-rc.0"
parse = """(?x)
    (?P<major>0|[1-9]\\d*)\\.
    (?P<minor>0|[1-9]\\d*)\\.
    (?P<patch>0|[1-9]\\d*)
    (?:
        -                                    # dash separator for pre-release section
        (?P<pre_release_label>[a-zA-Z-]+)    # pre-release label
        \\.
        (?P<pre_release_number>0|[1-9]\\d*)  # pre-release version number
    )?                                       # pre-release section is optional
"""
serialize = [
    "{major}.{minor}.{patch}-{pre_release_label}.{pre_release_number}",
    "{major}.{minor}.{patch}",
]
commit = true
tag = true

[tool.bumpversion.parts.pre_release_label]
values = [
    "rc",
    "final",
]
optional_value = "final"

[[tool.bumpversion.files]]
glob = "../components/*/package.json"
search = '"version": "{current_version}",'
replace = '"version": "{new_version}",'

[[tool.bumpversion.files]]
filename = "../sonar-project.properties"
search = "sonar.projectVersion={current_version}"
replace = "sonar.projectVersion={new_version}"

[[tool.bumpversion.files]]
filename = "../docs/src/changelog.md"
search = "[Unreleased]"
replace = "v{new_version} - {$RELEASE_DATE}"
include_bumps = [
    "pre_release_label",
] # this is the only bump that produces a non-rc release

[[tool.bumpversion.files]]
filename = "../.env"
search = "v{current_version}"
replace = "v{new_version}"

[[tool.bumpversion.files]]
filename = "../.circleci/config.yml"
search = "v{current_version}"
replace = "v{new_version}"

[[tool.bumpversion.files]]
filename = "../.github/workflows/application-tests.yml"
search = "v{current_version}"
replace = "v{new_version}"

[[tool.bumpversion.files]]
filename = "../components/shared_code/src/shared/utils/version.py"
search = 'QUALITY_TIME_VERSION = "{current_version}"'
replace = 'QUALITY_TIME_VERSION = "{new_version}"'

[[tool.bumpversion.files]]
filename = "../helm/Chart.yaml"
search = "{current_version}"
replace = "{new_version}"

[[tool.bumpversion.files]]
glob = "../**/pyproject.toml"
search = 'version = "{current_version}"'
replace = 'version = "{new_version}"'

[tool.bandit]
skips = [
    "B404", # Consider possible security implications associated with the subprocess module.
    "B603", # subprocess call - check for execution of untrusted input.
]
