"""Jenkins source."""

from ..meta.entity import Color, EntityAttributeType
from ..parameters import (
    access_parameters,
    Days,
    FailureType,
    MultipleChoiceParameter,
    MultipleChoiceWithAdditionParameter,
    TestResult,
)
from ..meta.source import Source


def jenkins_access_parameters(*args, **kwargs):
    """Create Jenkins specific access parameters."""
    kwargs["include"] = dict(private_token=False, landing_url=False)
    if "name" not in kwargs.setdefault("kwargs", {}).setdefault("url", {}):
        kwargs["kwargs"]["url"]["name"] = "URL to Jenkins job"
    kwargs["kwargs"]["password"] = dict(
        name="Password or API token for basic authentication",
        help_url="https://www.jenkins.io/doc/book/system-administration/authenticating-scripted-clients/",
    )
    return access_parameters(*args, **kwargs)


ALL_JENKINS_METRICS = ["failed_jobs", "source_up_to_dateness", "source_version", "unused_jobs"]

JOB_ENTITY = dict(
    name="job",
    attributes=[
        dict(name="Job name", key="name", url="url"),
        dict(
            name="Status of most recent build",
            key="build_status",
            color=dict(Success=Color.POSITIVE, Failure=Color.NEGATIVE, Aborted=Color.ACTIVE, Unstable=Color.WARNING),
        ),
        dict(name="Date of most recent build", key="build_date", type=EntityAttributeType.DATE),
    ],
)

JENKINS = Source(
    name="Jenkins",
    description="Jenkins is an open source continuous integration/continuous deployment server.",
    url="https://www.jenkins.io/",
    parameters=dict(
        inactive_days=Days(
            name="Number of days without builds after which to consider CI-jobs unused",
            short_name="number of days without builds",
            default_value="90",
            metrics=["unused_jobs"],
        ),
        jobs_to_include=MultipleChoiceWithAdditionParameter(
            name="Jobs to include (regular expressions or job names)",
            short_name="jobs to include",
            help="Jobs to include can be specified by job name or by regular expression. "
            "Use {parent job name}/{child job name} for the names of nested jobs.",
            placeholder="all",
            metrics=["failed_jobs", "source_up_to_dateness", "unused_jobs"],
        ),
        jobs_to_ignore=MultipleChoiceWithAdditionParameter(
            name="Jobs to ignore (regular expressions or job names)",
            short_name="jobs to ignore",
            help="Jobs to ignore can be specified by job name or by regular expression. "
            "Use {parent job name}/{child job name} for the names of nested jobs.",
            metrics=["failed_jobs", "source_up_to_dateness", "unused_jobs"],
        ),
        result_type=MultipleChoiceParameter(
            name="Build result types",
            short_name="result types",
            help="Limit which build result types to include.",
            placeholder="all result types",
            values=["Aborted", "Failure", "Not built", "Success", "Unstable"],
            metrics=["source_up_to_dateness"],
        ),
        failure_type=FailureType(values=["Aborted", "Failure", "Not built", "Unstable"]),
        **jenkins_access_parameters(
            ALL_JENKINS_METRICS,
            kwargs=dict(
                url=dict(
                    name="URL",
                    help="URL of the Jenkins instance, with port if necessary, but without path. For example, "
                    "'https://jenkins.example.org'.",
                )
            ),
        )
    ),
    entities=dict(
        failed_jobs=JOB_ENTITY,
        source_up_to_dateness=JOB_ENTITY,
        unused_jobs=JOB_ENTITY,
    ),
)

ALL_JENKINS_TEST_REPORT_METRICS = ["source_up_to_dateness", "test_cases", "tests"]

JENKINS_TEST_REPORT = Source(
    name="Jenkins test report",
    description="A Jenkins job with test results.",
    url="https://plugins.jenkins.io/junit",
    parameters=dict(
        test_result=TestResult(values=["failed", "passed", "skipped"]),
        **jenkins_access_parameters(
            ALL_JENKINS_TEST_REPORT_METRICS,
            kwargs=dict(
                url=dict(
                    help="URL to a Jenkins job with a test report generated by the JUnit plugin. For example, "
                    "'https://jenkins.example.org/job/test' or https://jenkins.example.org/job/test/job/master' "
                    "in case of a pipeline job."
                )
            ),
        )
    ),
    entities=dict(
        tests=dict(
            name="test",
            attributes=[
                dict(name="Class name"),
                dict(name="Test case", key="name"),
                dict(
                    name="Test result", color=dict(failed=Color.NEGATIVE, passed=Color.POSITIVE, skipped=Color.WARNING)
                ),
                dict(name="Number of builds the test has been failing", key="age", type=EntityAttributeType.INTEGER),
            ],
        )
    ),
)
