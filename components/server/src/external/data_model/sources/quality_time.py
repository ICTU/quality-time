"""Quality-time source."""

from ..meta.entity import Color, EntityAttributeType
from ..meta.source import Source
from ..parameters import MultipleChoiceParameter, MultipleChoiceWithAdditionParameter, URL


ALL_QUALITY_TIME_METRICS = ["metrics", "missing_metrics", "source_up_to_dateness", "source_version"]

QUALITY_TIME = Source(
    name="Quality-time",
    description="Quality report software for software development and maintenance.",
    url="https://github.com/ICTU/quality-time",
    parameters=dict(
        url=URL(
            name="Quality-time URL",
            help="URL of the Quality-time instance, with port if necessary, but without path. For example, "
            "'https://quality-time.example.org'.",
            validate_on=[],
            metrics=ALL_QUALITY_TIME_METRICS,
        ),
        status=MultipleChoiceParameter(
            name="Metric statuses",
            placeholder="all statuses",
            values=[
                "target met (green)",
                "near target met (yellow)",
                "target not met (red)",
                "technical debt target met (grey)",
                "unknown (white)",
            ],
            api_values={
                "target met (green)": "target_met",
                "near target met (yellow)": "near_target_met",
                "target not met (red)": "target_not_met",
                "technical debt target met (grey)": "debt_target_met",
                "unknown (white)": "unknown",
            },
            metrics=["metrics"],
        ),
        reports=MultipleChoiceWithAdditionParameter(
            name="Report names or identifiers",
            short_name="reports",
            placeholder="all reports",
            metrics=["metrics", "source_up_to_dateness", "missing_metrics"],
        ),
        metric_type=MultipleChoiceParameter(
            name="Metric types",
            help="If provided, only count metrics with the selected metric types.",
            placeholder="all metric types",
            values=[
                "Accessibility violations",
                "Commented out code",
                "Complex units",
                "Dependencies",
                "Duplicated lines",
                "Failed CI-jobs",
                "Issues",
                "Violation remediation effort",
                "Long units",
                "Manual test duration",
                "Manual test execution",
                "Many parameters",
                "Merge requests",
                "Metrics",
                "Missing metrics",
                "Performancetest duration",
                "Performancetest stability",
                "Ready user story points",
                "Scalability",
                "Security warnings",
                "Size (LOC)",
                "Slow transactions",
                "Source up-to-dateness",
                "Source version",
                "Suppressed violations",
                "Test branch coverage",
                "Test line coverage",
                "Test cases",
                "Tests",
                "Time remaining",
                "Unmerged branches",
                "Unused CI-jobs",
                "User story points",
                "Velocity",
                "Violations",
                "Sentiment",
            ],
            api_values={
                "Accessibility violations": "accessibility",
                "Commented out code": "commented_out_code",
                "Complex units": "complex_units",
                "Dependencies": "dependencies",
                "Duplicated lines": "duplicated_lines",
                "Failed CI-jobs": "failed_jobs",
                "Issues": "issues",
                "Long units": "long_units",
                "Manual test duration": "manual_test_duration",
                "Manual test execution": "manual_test_execution",
                "Many parameters": "many_parameters",
                "Merge requests": "merge_requests",
                "Metrics": "metrics",
                "Missing metrics": "missing_metrics",
                "Performancetest duration": "performancetest_duration",
                "Performancetest stability": "performancetest_stability",
                "Ready user story points": "ready_user_story_points",
                "Scalability": "scalability",
                "Security warnings": "security_warnings",
                "Size (LOC)": "loc",
                "Slow transactions": "slow_transactions",
                "Source up-to-dateness": "source_up_to_dateness",
                "Source version": "source_version",
                "Suppressed violations": "suppressed_violations",
                "Test branch coverage": "uncovered_branches",
                "Test line coverage": "uncovered_lines",
                "Test cases": "test_cases",
                "Tests": "tests",
                "Time remaining": "time_remaining",
                "Unmerged branches": "unmerged_branches",
                "Unused CI-jobs": "unused_jobs",
                "User story points": "user_story_points",
                "Velocity": "velocity",
                "Violations": "violations",
                "Violation remediation effort": "remediation_effort",
                "Sentiment": "sentiment",
            },
            metrics=["metrics"],
        ),
        source_type=MultipleChoiceParameter(
            name="Source types",
            help="If provided, only count metrics with one or more sources of the selected source types.",
            placeholder="all source types",
            values=[
                "Anchore",
                "Anchore Jenkins plugin",
                "Axe CSV",
                "Axe HTML reporter",
                "Axe-core",
                "Azure DevOps Server",
                "Bandit",
                "Calendar date",
                "Checkmarx CxSAST",
                "cloc",
                "Cobertura",
                "Cobertura Jenkins plugin",
                "Composer",
                "Gatling",
                "GitLab",
                "JaCoCo",
                "JaCoCo Jenkins plugin",
                "Jenkins",
                "Jenkins test report",
                "Jira",
                "JMeter CSV",
                "JMeter JSON",
                "JUnit XML report",
                "Manual number",
                "NCover",
                "npm",
                "OJAudit",
                "OpenVAS",
                "OWASP Dependency Check",
                "OWASP ZAP",
                "Performancetest-runner",
                "pip",
                "Pyupio Safety",
                "Quality-time",
                "Robot Framework",
                "Robot Framework Jenkins plugin",
                "Snyk",
                "JSON file with security warnings",
                "SonarQube",
                "TestNG",
                "Trello",
            ],
            api_values={
                "Anchore": "anchore",
                "Anchore Jenkins plugin": "anchore_jenkins_plugin",
                "Axe CSV": "axecsv",
                "Axe HTML reporter": "axe_html_reporter",
                "Axe-core": "axe_core",
                "Azure DevOps Server": "azure_devops",
                "Bandit": "bandit",
                "Calendar date": "calendar",
                "Checkmarx CxSAST": "cxsast",
                "cloc": "cloc",
                "Cobertura": "cobertura",
                "Cobertura Jenkins plugin": "cobertura_jenkins_plugin",
                "Composer": "composer",
                "Gatling": "gatling",
                "GitLab": "gitlab",
                "JaCoCo": "jacoco",
                "JaCoCo Jenkins plugin": "jacoco_jenkins_plugin",
                "Jenkins": "jenkins",
                "Jenkins test report": "jenkins_test_report",
                "Jira": "jira",
                "JMeter CSV": "jmeter_csv",
                "JMeter JSON": "jmeter_json",
                "JSON file with security warnings": "generic_json",
                "JUnit XML report": "junit",
                "Manual number": "manual_number",
                "NCover": "ncover",
                "npm": "npm",
                "OJAudit": "ojaudit",
                "OpenVAS": "openvas",
                "OWASP Dependency Check": "owasp_dependency_check",
                "OWASP ZAP": "owasp_zap",
                "Performancetest-runner": "performancetest_runner",
                "pip": "pip",
                "Pyupio Safety": "pyupio_safety",
                "Quality-time": "quality_time",
                "Robot Framework": "robot_framework",
                "Robot Framework Jenkins plugin": "robot_framework_jenkins_plugin",
                "Snyk": "snyk",
                "SonarQube": "sonarqube",
                "TestNG": "testng",
                "Trello": "trello",
            },
            metrics=["metrics"],
        ),
        tags=MultipleChoiceWithAdditionParameter(
            name="Tags",
            help="If provided, only count metrics with one ore more of the given tags.",
            placeholder="all tags",
            metrics=["metrics"],
        ),
    ),
    entities=dict(
        metrics=dict(
            name="metric",
            attributes=[
                dict(name="Report", url="report_url"),
                dict(name="Subject", url="subject_url"),
                dict(name="Metric", url="metric_url"),
                dict(
                    name="Status",
                    type=EntityAttributeType.STATUS,
                    color=dict(
                        target_met=Color.POSITIVE,
                        near_target_met=Color.WARNING,
                        target_not_met=Color.NEGATIVE,
                        technical_debt_target_met=Color.ACTIVE,
                    ),
                ),
                dict(name="Measurement", type=EntityAttributeType.INTEGER),
                dict(name="Target", type=EntityAttributeType.INTEGER),
            ],
        ),
        missing_metrics=dict(
            name="metric type",
            attributes=[
                dict(name="Report", url="report_url"),
                dict(name="Subject", url="subject_url"),
                dict(name="Subject type"),
                dict(name="Metric type"),
            ],
        ),
    ),
)
