[project]
name = "collector"
version = "5.3.1"
dependencies = [
    "aiogqlc==4.1.0",
    "aiohttp==3.9.1",
    "beautifulsoup4==4.12.2",
    "defusedxml==0.7.1",
    "packaging==23.2",
    "pymongo==4.6.1",
    "python-dateutil==2.8.2",
]

[project.optional-dependencies]
dev = [
    "coverage==7.3.2",
    "mongomock==4.1.2",
    "pip==23.3.1",
    "pipx==1.2.1",
    "pip-tools==7.3.0",  # To add hashes to requirements
    "pydantic==2.5.2",  # Needed for importing the data model in the tests from the shared code component
    "types-beautifulsoup4==4.12.0.7",
    "types-python-dateutil==2.8.19.14",
    "unittest-xml-reporting==3.2.0",  # Needed to generate JUnit XML output for Sonarcloud.io
]
tools = [
    "bandit==1.7.5",
    "mypy==1.7.1",
    "pip-audit==2.6.1",
    "ruff==0.1.6",
    "safety==2.3.5",
    "vulture==2.10"
]

[tool.mypy]
ignore_missing_imports = false
incremental = false
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = [
    "defusedxml"
]
ignore_missing_imports = true

[tool.ruff]
target-version = "py311"
line-length = 120
src = ["src"]
select = ["ALL"]
ignore = [
    "ANN001",  # https://docs.astral.sh/ruff/rules/missing-type-function-argument/ - too many untyped arguments atm to turn this rule on
    "ANN002",  # https://docs.astral.sh/ruff/rules/missing-type-args/ - leads to false positives for super().__init__(*args, **kwargs)
    "ANN003",  # https://docs.astral.sh/ruff/rules/missing-type-kwargs/ - leads to false positives for super().__init__(*args, **kwargs)
    "ANN101",  # https://docs.astral.sh/ruff/rules/missing-type-self/ - type checkers can infer the type of `self`, so annotating it is superfluous
    "ANN102",  # https://docs.astral.sh/ruff/rules/missing-type-cls/ - type checkers can infer the type of `cls`, so annotating it is superfluous
    "ANN204",  # https://docs.astral.sh/ruff/rules/missing-return-type-special-method/ - typing classes that inherit from set and list correctly is surprisingly hard
    "ARG002",  # https://docs.astral.sh/ruff/rules/unused-method-argument/ - this rule doesn't take inheritance into account
    "COM812",  # https://docs.astral.sh/ruff/rules/missing-trailing-comma/ - this rule may cause conflicts when used with the ruff formatter
    "D107",    # https://docs.astral.sh/ruff/rules/undocumented-public-init/ - requiring __init__() methods to have docstrings seems a bit much
    "D203",    # https://docs.astral.sh/ruff/rules/one-blank-line-before-class/ - prevent warning: `one-blank-line-before-class` (D203) and `no-blank-line-before-class` (D211) are incompatible. Ignoring `one-blank-line-before-class`
    "D213",    # https://docs.astral.sh/ruff/rules/multi-line-summary-second-line/ - prevent warning: `multi-line-summary-first-line` (D212) and `multi-line-summary-second-line` (D213) are incompatible. Ignoring `multi-line-summary-second-line`
    "FBT",     # https://docs.astral.sh/ruff/rules/#flake8-boolean-trap-fbt - not sure of the value of preventing "boolean traps"
    "ISC001",  # https://docs.astral.sh/ruff/rules/single-line-implicit-string-concatenation/ - this rule may cause conflicts when used with the ruff formatter
    "PD",      # https://docs.astral.sh/ruff/rules/#pandas-vet-pd - pandas isn't used
    "PT",      # https://docs.astral.sh/ruff/rules/#flake8-pytest-style-pt - pytest isn't used
]

[tool.ruff.isort]
section-order = ["future", "standard-library", "third-party", "second-party", "first-party", "tests", "local-folder"]

[tool.ruff.isort.sections]
"second-party" = ["shared", "shared_data_model"]
"tests" = ["tests"]

[tool.ruff.per-file-ignores]
".vulture_ignore_list.py" = ["ALL"]
"__init__.py" = [
    "D104",  # https://docs.astral.sh/ruff/rules/undocumented-public-package/ - don't require doc strings in __init__.py files
    "F401",  # https://docs.astral.sh/ruff/rules/unused-import/ - collectors are imported in __init__.py files to flatten the module hierarchy
]
"src/base_collectors/source_collector.py" = [
    "BLE001"  # https://docs.astral.sh/ruff/rules/blind-except/ - allow for catching blind exception `Exception`
]
"src/quality_time_collector.py" = [
    "INP001",  # https://docs.astral.sh/ruff/rules/implicit-namespace-package/ - false positive because this is the main script
]
"tests/**/*.py" = [
    "ANN201",  # https://docs.astral.sh/ruff/rules/missing-return-type-undocumented-public-function/ - don't require test functions to have return types
]
