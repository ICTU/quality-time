name: SonarCloud

on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  sonarcloud:
    runs-on: ubuntu-latest
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    steps:
    - uses: actions/checkout@v3.5.0
      if: env.SONAR_TOKEN != null
      with:
        fetch-depth: 0  # Disabling shallow clone is recommended for improving relevancy of reporting
    - name: Set up Python
      uses: actions/setup-python@v4
      if: env.SONAR_TOKEN != null
      with:
        python-version: '3.11'
    - name: Set up Node
      uses: actions/setup-node@v3.6.0
      if: env.SONAR_TOKEN != null
      with:
        node-version: '18'
    - name: Collector
      if: env.SONAR_TOKEN != null
      working-directory: components/collector
      run: |
        python -m venv venv
        . venv/bin/activate
        ci/pip-install.sh
        ci/unittest.sh
        export PYTHONPATH=`python -c 'import sys;print(":".join(sys.argv[1:]))' src $PYTHONPATH`
        python -m xmlrunner --output-file build/unittests.xml
    - name: Notifier
      if: env.SONAR_TOKEN != null
      working-directory: components/notifier
      run: |
        python -m venv venv
        . venv/bin/activate
        ci/pip-install.sh
        ci/unittest.sh
        export PYTHONPATH=`python -c 'import sys;print(":".join(sys.argv[1:]))' src $PYTHONPATH`
        python -m xmlrunner --output-file build/unittests.xml
    - name: External Server
      if: env.SONAR_TOKEN != null
      working-directory: components/external_server
      run: |
        python -m venv venv
        . venv/bin/activate
        ci/pip-install.sh
        ci/unittest.sh
        export PYTHONPATH=`python -c 'import sys;print(":".join(sys.argv[1:]))' src $PYTHONPATH`
        python -m xmlrunner --output-file build/unittests.xml
    - name: Internal Server
      if: env.SONAR_TOKEN != null
      working-directory: components/internal_server
      run: |
        python -m venv venv
        . venv/bin/activate
        ci/pip-install.sh
        ci/unittest.sh
        export PYTHONPATH=`python -c 'import sys;print(":".join(sys.argv[1:]))' src $PYTHONPATH`
        python -m xmlrunner --output-file build/unittests.xml
    - name: Shared Data Model
      if: env.SONAR_TOKEN != null
      working-directory: components/shared_data_model
      run: |
        python -m venv venv
        . venv/bin/activate
        ci/pip-install.sh
        ci/unittest.sh
        export PYTHONPATH=`python -c 'import sys;print(":".join(sys.argv[1:]))' src $PYTHONPATH`
        python -m xmlrunner --output-file build/unittests.xml
    - name: Shared Server Code
      if: env.SONAR_TOKEN != null
      working-directory: components/shared_server_code
      run: |
        python -m venv venv
        . venv/bin/activate
        ci/pip-install.sh
        ci/unittest.sh
        export PYTHONPATH=`python -c 'import sys;print(":".join(sys.argv[1:]))' src $PYTHONPATH`
        python -m xmlrunner --output-file build/unittests.xml
    - name: Frontend
      if: env.SONAR_TOKEN != null
      working-directory: components/frontend
      run: |
        npm install
        npm run build --if-present
        npm test -- --coverage
      env:
        CI: true
    - name: Create packages
      if: env.SONAR_TOKEN != null
      run: |
        touch components/__init__.py
        touch components/external_server/__init__.py
        touch components/external_server/src/__init__.py
        touch components/internal_server/__init__.py
        touch components/internal_server/src/__init__.py
        touch components/collector/__init__.py
        touch components/collector/src/__init__.py
        touch components/notifier/__init__.py
        touch components/notifier/src/__init__.py
        touch components/shared_data_model/__init__.py
        touch components/shared_data_model/src/__init__.py
        touch components/shared_server_code/__init__.py
        touch components/shared_server_code/src/__init__.py
    - name: Fix code coverage paths  # Needed because the Sonar scanner runs in a container with different file paths
      if: env.SONAR_TOKEN != null
      run: |
        sed -i 's/\/home\/runner\/work\/quality-time\/quality-time\//\/github\/workspace\//g' components/collector/build/unittest-coverage.xml
        sed -i 's/\/home\/runner\/work\/quality-time\/quality-time\//\/github\/workspace\//g' components/notifier/build/unittest-coverage.xml
        sed -i 's/\/home\/runner\/work\/quality-time\/quality-time\//\/github\/workspace\//g' components/external_server/build/unittest-coverage.xml
        sed -i 's/\/home\/runner\/work\/quality-time\/quality-time\//\/github\/workspace\//g' components/internal_server/build/unittest-coverage.xml
        sed -i 's/\/home\/runner\/work\/quality-time\/quality-time\//\/github\/workspace\//g' components/shared_data_model/build/unittest-coverage.xml
        sed -i 's/\/home\/runner\/work\/quality-time\/quality-time\//\/github\/workspace\//g' components/shared_server_code/build/unittest-coverage.xml
    - name: Sonarcloud scan
      if: env.SONAR_TOKEN != null
      uses: sonarsource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
